<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 文章中心</title>
    <link>https://lajunta.github.io/hugoblog/tags/golang/</link>
    <description>Recent content in golang on 文章中心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 06 Apr 2021 13:04:40 +0800</lastBuildDate><atom:link href="https://lajunta.github.io/hugoblog/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Hello Web</title>
      <link>https://lajunta.github.io/hugoblog/programe/golang/webasic/hello/</link>
      <pubDate>Tue, 06 Apr 2021 13:04:40 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/programe/golang/webasic/hello/</guid>
      <description>介绍 Go 语言已经内置了一个网页服务器.标准库的net/http包包含了HTTP协议的所有功能,如HTTP客户端和服务端功能,在本例中你会发现创建一个网页服务端是多么的简单。
路由及处理请求的函数 首先创建一个函数来处理从浏览器发来的所有HTTP连接,函数签名:
1  func(w http.ResponseWriter, r *http.Request)   这个函数包含二个参数:
第一个是你要写入接口,你将会把你的输出写到这个接口中
第二个是浏览器发来的请求，你可以检查并处理其中的相关信息
把路由和函数结合起来,形成最终的处理函数:
1 2 3  http.HandleFunc(&amp;#34;/&amp;#34;, func (w http.ResponseWriter, r *http.Request)){ fmt.Fprintf(w, &amp;#34;你请求的网址是: %s\n&amp;#34;, r.URL.Path) }   监听HTTP连接 路由请求处理函数不能接收到任何外部的HTTP连接,需要一个HTTP服务函数来监听并转发相关的请求到处理函数
1  http.ListenAndServe(&amp;#34;:80&amp;#34;,nil)   完整代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) // indexHandler handle request to url path &amp;#34;/&amp;#34; func indexHandler(w http.</description>
    </item>
    
    <item>
      <title>Golang Http Server</title>
      <link>https://lajunta.github.io/hugoblog/programe/golang/webasic/server/</link>
      <pubDate>Sun, 04 Apr 2021 23:56:54 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/programe/golang/webasic/server/</guid>
      <description>HTTP Server 介绍  一个基本的服务器包括以下几项工作:
 处理动态请求 提供静态文件服务 接受连接  处理动态请求  net/http包包括了所有的请求和处理功能，我们能用http.HandleFunc注册一个新的路由。它的第一个参数是一个路径，第二个参数是一个处理函数。
http.Request包括所有请求和参数信息，你可能使用r.URL.Query().Get(&amp;quot;token&amp;quot;) 处理GET参数，使用r.FormValue(&amp;quot;email&amp;quot;)处理 POST 参数。
静态资源服务  我们使用内置的http.FileServer来处理静态文件如js,css和图片
1  fs := http.FileServer(http.Dir(&amp;#34;static/&amp;#34;))   我们的文件服务设置好后，我们需要指定一个路径给它。需要注意的是：我们需要把URL的一部分给去掉，这通常是静态文件的目录名:
1  http.Handle(&amp;#34;/static/&amp;#34;,http.StripPrefix(&amp;#34;/static/&amp;#34;,fs))   接收请求 1  http.ListenAndServe(&amp;#34;:80&amp;#34;,nil)   代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  package main import( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) func main(){ http.HandleFunc(&amp;#34;/&amp;#34;,func(w http.ResponseWriter,r *http.Request){ fmt.Fprint(w,&amp;#34;welcome friend&amp;#34;) }) fs := http.</description>
    </item>
    
    <item>
      <title>Golang mongodb driver usage</title>
      <link>https://lajunta.github.io/hugoblog/programe/golang/mongodb/</link>
      <pubDate>Sun, 04 Apr 2021 23:56:54 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/programe/golang/mongodb/</guid>
      <description>Golang and Mongodb  connect crud  Connect Database 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  package database import ( &amp;#34;context&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;time&amp;#34; &amp;#34;go.mongodb.org/mongo-driver/mongo&amp;#34; &amp;#34;go.mongodb.org/mongo-driver/mongo/options&amp;#34; ) var ( // DBClient is exposed db client  DBClient *mongo.</description>
    </item>
    
    <item>
      <title>Golang Read JSON File</title>
      <link>https://lajunta.github.io/hugoblog/programe/golang/webasic/jsonfile/</link>
      <pubDate>Sun, 04 Apr 2021 23:56:54 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/programe/golang/webasic/jsonfile/</guid>
      <description>从文件中读取 JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  package main import( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;log&amp;#34; ) type Config struct{ Name string `json:&amp;#34;name&amp;#34;` Awake bool `json:&amp;#34;awake&amp;#34;` Hungry bool `json:&amp;#34;hungry&amp;#34;` } func main(){ f, err := ioutil.ReadFile(&amp;#34;config.json&amp;#34;) if err != nil{ log.Fatal(err) } c := Config{} err = json.</description>
    </item>
    
    <item>
      <title>Golang read toml file</title>
      <link>https://lajunta.github.io/hugoblog/programe/golang/toml/</link>
      <pubDate>Sun, 04 Apr 2021 23:56:54 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/programe/golang/toml/</guid>
      <description>Toml Config 从toml格式文件中读取配置
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;github.com/BurnSushi/toml&amp;#34; ) type Config struct{ Name string Awake bool Hungry bool } func main(){ c := Config{} _, err := toml.DecodeFile(&amp;#34;config.toml&amp;#34;, &amp;amp;c) if err!= nil{ log.Fatal(err) } fmt.Printf(&amp;#34;+v\n&amp;#34;,c) }   </description>
    </item>
    
    <item>
      <title>Golang sqlite3</title>
      <link>https://lajunta.github.io/hugoblog/programe/golang/sqlite3/</link>
      <pubDate>Sun, 04 Apr 2021 23:56:54 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/programe/golang/sqlite3/</guid>
      <description>Sqlite3 used by golang Create tables 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  db = dbConn() createSemester := ` create table if not exists semesters(id integer primary key, name text not null unique, short_name text not null unique, begin_on integer not null unique,end_on integer not null unique);` db.Exec(createSemester) createApply := ` create table if not exists applys(id integer primary key, applyer text not null,semester text not null,croom text not null, banji text not null, course text not null,wday text not null, jieci text not null, status text not null);` db.</description>
    </item>
    
    <item>
      <title>Golang template</title>
      <link>https://lajunta.github.io/hugoblog/programe/golang/webasic/template/</link>
      <pubDate>Sun, 04 Apr 2021 23:56:54 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/programe/golang/webasic/template/</guid>
      <description>模板 html/template包提供了丰富的模板语言，它通常能显示结构化的数据。它最大的好处是能自动对数据进行转义，不用担心 XSS攻击
创建模板 先准备数据:
1 2 3 4 5 6 7 8  data := TodoPageData{ PageTitle: &amp;#34;My TODO list&amp;#34;, Todos: []Todo{ {Title: &amp;#34;Task 1&amp;#34;, Done: false}, {Title: &amp;#34;Task 2&amp;#34;, Done: true}, {Title: &amp;#34;Task 3&amp;#34;, Done: true}, }, }   模板文件:
1 2 3 4 5 6 7 8 9 10 11 12  {{ define &amp;#34;Index&amp;#34; }} &amp;lt;h1&amp;gt;{{.PageTitle}}&amp;lt;/h1&amp;gt; &amp;lt;ul&amp;gt; {{range .Todos}} {{if .Done}} &amp;lt;li class=&amp;#34;done&amp;#34;&amp;gt;{{.Title}}&amp;lt;/li&amp;gt; {{else}} &amp;lt;li&amp;gt;{{.Title}}&amp;lt;/li&amp;gt; {{end}} {{end}} &amp;lt;/ul&amp;gt; {{ end }}   从文件中获取模板 模板可以是字符串也可以是文件，从文件中获取</description>
    </item>
    
    <item>
      <title>Golang Test Json</title>
      <link>https://lajunta.github.io/hugoblog/programe/golang/webasic/json/</link>
      <pubDate>Sun, 04 Apr 2021 23:56:54 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/programe/golang/webasic/json/</guid>
      <description>JSON json 编码与解码例子
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  // json.go package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) type User struct { Firstname string `json:&amp;#34;firstname&amp;#34;` Lastname string `json:&amp;#34;lastname&amp;#34;` Age int `json:&amp;#34;age&amp;#34;` } func main() { http.HandleFunc(&amp;#34;/decode&amp;#34;, func(w http.ResponseWriter, r *http.</description>
    </item>
    
    <item>
      <title>Gorilla Route</title>
      <link>https://lajunta.github.io/hugoblog/programe/golang/webasic/routing/</link>
      <pubDate>Sun, 04 Apr 2021 23:56:54 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/programe/golang/webasic/routing/</guid>
      <description>路由设计 net/http包提供了相对完整的http协议的功能,但是对于复杂的路由请求和解析，功能较弱，我们可以用第三方的gorilla/mux来完成这个事情。
安装 gorilla/mux包 1  go get -u github.com/gorilla/mux   创建新路由 首先，先创建一个新的请求路由,它将做为你的应用的主路由并传给你的服务器，它接受所有的网页连接。
1  router := mux.NewRouter()   注册一个请求处理函数 你可以像以前的处理函数一样使用它
1  router.HandleFunc(path, handler)   URL参数 gorilla/mux最强大的地方就是url的解析功能,它可以从url中提取相关的参数。
1  /books/go-programming/page/10   上面的url有二个动态参数，go-programming 和 10
为了对以上的动态参数进行匹配，在设计路由时，可以这样做:
1  router.HandleFunc(&amp;#34;/books/{title}/page/{page}&amp;#34;,handler)   在handler 中可以众花括号中取得相应的值,mux.Vars(r)这个函数把请求做为参数：
1 2 3 4 5  func(w http.ResponseWriter, r *http.Request){ vars := mux.Vars(r) title := vars[&amp;#34;title&amp;#34;] //get title  page := vars[&amp;#34;page&amp;#34;] //get page }   表单数据依旧用 r.</description>
    </item>
    
    <item>
      <title>Gorilla session</title>
      <link>https://lajunta.github.io/hugoblog/programe/golang/webasic/sessions/</link>
      <pubDate>Sun, 04 Apr 2021 23:56:54 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/programe/golang/webasic/sessions/</guid>
      <description>Sessions 使用 gorilla/sessions 来处理 sessions 数据
1  go get github.com/gorilla/sessions   Cookies 是每次用户访问服务器时会附带的一小段数据,用来维护连接的状态
定义sessions 1 2 3 4 5 6  var ( // key must be 16, 24 or 32 bytes long (AES-128, AES-192 or AES-256)  key = []byte(&amp;#34;super-secret-key&amp;#34;) cookieName := &amp;#34;your app cookie name&amp;#34; store = sessions.NewCookieStore(key) )   获得 sessions value 1 2 3 4 5 6  session, _ := store.Get(r,cookieName) // Check if user is authenticated  if auth, ok := session.</description>
    </item>
    
    <item>
      <title>vim go config</title>
      <link>https://lajunta.github.io/hugoblog/tools/vim/vim-go/</link>
      <pubDate>Sun, 04 Apr 2021 23:56:54 +0800</pubDate>
      
      <guid>https://lajunta.github.io/hugoblog/tools/vim/vim-go/</guid>
      <description>VIM-GO PLUGIN Install Vim-Pathogen 1 2  mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;amp;&amp;amp; \ curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim    Modify .vimrc  1 2 3  execute pathogen#infect() syntax on filetype plugin indent on   Install Nerdtree 1  git clone https://github.com/preservim/nerdtree.git ~/.vim/bundle/nerdtree   Install vim-go 1  git clone https://github.com/fatih/vim-go.git ~/.vim/bundle/vim-go   </description>
    </item>
    
  </channel>
</rss>
